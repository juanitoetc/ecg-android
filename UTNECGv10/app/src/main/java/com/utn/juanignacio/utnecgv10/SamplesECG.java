package com.utn.juanignacio.utnecgv10;

import java.io.Serializable;
import java.util.Arrays;

/**
 * Created by JuanIgnacio on 10/10/2015.
 */
public final class SamplesECG implements Serializable {

        public double fs;
        public int[] Samples;

        public SamplesECG() {
                //instancia
                fs = 500;            //Frecuencia de muestreo
                //Muestras
                Samples = new int[]{379,486,428,353,452,606,648,533,322,151,72,32,-3,-6,39,39,9,-32,-27,-27,-21,-15,-6,-15,-18,-25,-52,-61,-53,-58,-41,-17,-22,-38,-32,-24,-35,-40,-56,-50,-31,-20,-25,-24,-10,-7,-18,-39,-37,-26,-21,-4,2,-17,-4,10,-4,-31,-31,-4,1,11,6,-21,-5,9,-13,-24,-13,-10,3,11,31,30,30,38,20,-3,2,14,28,29,36,31,48,53,33,12,14,18,40,52,62,60,78,100,72,38,37,59,72,74,85,81,93,114,114,87,89,98,118,133,145,147,173,180,153,129,141,150,163,173,202,186,190,198,197,177,165,179,182,207,227,215,208,225,210,196,190,191,201,199,205,192,181,196,177,136,119,109,109,119,136,122,112,110,108,74,58,61,93,78,76,58,57,70,65,33,35,38,30,46,68,66,72,79,65,36,27,41,62,71,52,49,74,89,57,46,40,45,62,62,84,80,79,95,79,59,54,67,70,80,97,102,97,97,94,68,69,72,75,96,104,91,110,120,102,78,81,103,98,86,109,115,110,128,112,86,75,67,79,109,119,116,106,128,120,86,77,84,99,110,129,125,122,138,128,97,106,107,99,122,146,150,142,150,141,118,104,103,101,116,131,141,143,153,147,126,108,110,119,137,143,140,143,156,141,130,120,137,131,138,158,159,147,156,157,143,130,143,130,149,165,174,175,184,172,147,155,157,140,158,177,170,172,189,172,160,165,175,158,184,182,168,179,201,182,166,158,162,161,174,189,191,185,204,190,179,166,170,174,179,198,200,203,218,214,202,170,166,180,190,205,213,212,217,200,201,193,181,195,202,213,216,204,224,218,203,189,200,212,205,217,226,231,244,236,222,211,205,198,223,227,236,224,234,238,225,208,216,227,236,221,236,257,260,242,221,203,211,215,224,237,243,250,265,265,242,237,240,216,230,243,255,258,266,255,237,229,230,237,239,248,265,264,270,266,256,229,221,236,251,277,293,272,283,284,254,252,253,255,254,266,289,277,276,286,275,262,259,259,272,282,287,280,306,299,289,263,271,293,304,323,344,355,384,391,372,357,372,375,375,383,424,436,438,440,437,411,410,404,407,401,397,398,400,405,376,335,302,286,289,301,310,308,315,318,315,289,273,292,301,313,320,297,307,313,306,300,285,284,290,296,307,307,316,317,302,276,283,289,308,334,381,409,417,409,400,381,383,421,490,554,644,767,867,824,725,755,900,970,880,712,548,470,439,377,375,390,401,404,397,395,410,410,414,426,414,384,354,363,378,379,378,384,388,405,395,379,368,361,379,381,405,414,418,429,406,370,369,381,391,407,410,407,411,428,423,410,389,385,403,430,442,432,419,444,440,420,414,409,433,449,447,440,439,455,448,434,435,432,435,446,466,476,473,472,473,453,440,442,454,475,489,484,492,514,509,488,480,471,483,501,521,516,525,534,515,507,506,514,515,529,563,565,560,570,567,557,545,537,551,570,593,594,594,611,617,602,585,589,596,601,630,627,610,621,627,619,603,597,617,641,642,645,610,609,615,591,559,576,559,543,553,549,538,537,531,500,476,474,481,480,480,490,486,476,500,462,418,430,445,441,441,445,439,457,458,428,412,416,414,436,452,449,444,460,454,434,420,418,432,433,444,453,452,474,474,463,456,435,441,443,456,469,468,477,465,466,456,476,459,447,466,484,476,486,490,478,448,460,465,468,466,478,488,509,489,485,453,446,459,467,477,486,492,509,492,471,459,453,462,461,470,479,484,493,485,470,467,460,454,467,477,490,482,504,506,489,465,475,458,469,488,503,509,512,500,494,477,465,489,502,499,495,507,524,509,496,486,473,484,493,498,499,510,537,536,510,481,475,495,490,515,521,518,528,525,516,512,522,511,509,518,520,523,539,541,530,500,502,510,520,534,538,543,553,553,536,510,525,545,530,534,553,542,569,581,560,528,511,536,537,541,553,556,561,581,567,544,537,537,540,558,572,572,586,583,557,536,545,556,545,551,564,550,576,577,569,547,532,538,552,562,575,559,559,580,572,539,534,544,561,559,566,555,564,594,582,550,558,554,560,565,565,578,578,595,601,569,538,550,561,564,568,569,583,603,581,562,558,556,568,578,583,585,581,592,590,556,544,553,570,576,593,580,586,597,588,571,558,575,574,589,599,602,609,626,636,627,624,645,663,668,682,698,707,711,705,681,697,703,710,727,746,745,748,742,722,684,670,678,687,672,654,637,621,606,609,596,585,586,579,587,612,610,604,609,610,586,570,579,585,588,608,598,595,620,600,580,566,567,581,587,598,600,609,634,632,642,658,668,670,671,705,720,734,773,863,889,940,1057,1051,949,967,1103,1204,1162,1000,796,693,669,616,624,677,701,690,691,672,665,667,677,682,674,675,673,679,691,677,647,641,646,649,652,670,692,685,678,684,667,642,654,657,652,664,679,676,696,689,673,657,660,680,683,691,692,695,711,700,702,692,674,674,676,696,717,710,709,721,701,695,705,707,701,724,749,741,749,732,714,704,706,717,727,735,745,740,751,757,729,718,739,728,744,755,772,769,773,776,761,748,769,767,767,784,797,801,830,826,795,776,793,806,813,821,828,840,857,868,840,822,833,846,844,856,878,883,887,886,878,856,857,872,878,876,874,881,902,900,868,844,830,835,845,829,839,835,827,817,781,757,772,762,758,750,757,750,760,748,722,700,694,688,697,694,700,704,708,707,695,675,669,672,663,680,688,695,704,713,690,674,668,679,683,692,711,702,703,729,705,666,668,685,704,712,710,693,701,707,712,695,692,688,689,690,717,717,727,735,713,690,691,689,702,705,723,732,716,737,725,691,682,696,699,713,724,724,742,744,722,701,689,696,715,709,725,737,741,744,730,691,709,699,709,719,721,723,734,740,726,704,701,701,724,728,738,734,744,742,736,711,705,710,698,711,729,718,726,759,747,708,698,703,724,728,717,729,737,751,755,719,711,711,720,729,740,744,750,745,749,719,710,711,712,733,747,751,759,761,755,732,729,725,725,735,756,763,759,769,771,737,731,733,751,768,770,765,764,769,758,743,735,729,745,759,770,771,763,770,782,765,750,748,746,762,777,770,779,784,786,760,746,759,759,773,787,777,782,797,795,779,768,765,759,774,793,794,790,810,816,795,771,767,768,799,816,817,820,808,811,790,780,785,777,783,811,810,809,828,833,810,789,785,795,815,821,810,813,838,834,817,795,799,804,806,832,840,836,854,858,855,853,855,864,878,916,937,923,950,959,936,923,944,947,961,984,1002,1008,1010,997,969,945,940,930,946,952,936,900,898,886,856,836,840,830,836,854,869,867,872,866,856,834,841,839,835,861,875,856,880,857,830,818,832,826,832,849,858,854,857,861,849,855,884,895,934,951,956,965,990,1002,1029,1067,1097,1167,1301,1342,1235,1198,1281,1397,846,847,860,867,877,879,888,914,911,921,937,947,949,950,983,998,1013,1052,1141,1167,1219,1336,1329,1228,1245,1381,1482,1440,1278,1074,971,947,894,902,955,979,968,969,950,942,944,954,960,951,952,950,956,968,954,924,918,923,926,929,946,968,962,955,961,943,919,930,933,928,940,955,952,972,964,949,933,935,955,959,966,968,970,986,976,977,967,949,949,951,971,992,984,984,995,976,969,980,982,976,998,1023,1016,1023,1006,988,978,980,991,1001,1009,1019,1013,1025,1030,1002,991,1012,1001,1017,1028,1045,1042,1046,1049,1034,1021,1041,1040,1040,1057,1070,1074,1102,1099,1068,1049,1065,1078,1085,1092,1100,1112,1129,1140,1112,1094,1105,1117,1115,1128,1149,1154,1158,1157,1149,1127,1128,1142,1149,1147,1145,1152,1173,1171,1138,1114,1100,1105,1116,1099,1109,1105,1097,1087,1051,1027,1041,1032,1028,1019,1027,1020,1029,1017,992,969,963,957,966,963,969,973,977,976,964,944,937,941,931,948,956,963,972,981,958,942,936,947,951,959,979,969,971,996,973,933,935,953,972,979,977,960,968,974,979,962,959,954,956,956,984,983,993,1002,979,956,957,955,968,971,989,998,981,1002,991,957,948,961,964,978,989,989,1007,1009,987,965,954,961,979,974,989,1001,1006,1008,994,955,973,963,973,983,985,987,998,1004,990,967,964,964,987,991,1002,997,1007,1006,999,974,968,972,960,974,992,980,988,1021,1010,970,960,965,986,990,979,991,999,1012,1017,981,973,972,981,991,1001,1005,1012,1006,1010,980,971,972,973,994,1007,1012,1020,1022,1016,992,989,985,985,995,1016,1023,1018,1029,1031,997,991,992,1011,1027,1030,1024,1024,1028,1017,1002,994,988,1004,1018,1029,1029,1022,1029,1040,1023,1008,1006,1004,1020,1035,1027,1036,1042,1044,1018,1004,1016,1016,1030,1044,1034,1039,1055,1052,1036,1025,1022,1016,1031,1050,1051,1047,1067,1073,1051,1027,1023,1025,1055,1072,1073,1076,1064,1067,1046,1035,1041,1032,1038,1066,1065,1065,1083,1088,1065,1044,1040,1050,1069,1075,1064,1068,1092,1088,1071,1049,1053,1058,1060,1086,1094,1089,1108,1111,1108,1107,1108,1117,1132,1170,1190,1176,1203,1211,1189,1176,1196,1200,1213,1237,1254,1260,1263,1249,1221,1197,1192,1181,1198,1204,1187,1152,1149,1137,1107,1087,1092,1081,1087,1106,1121,1118,1122,1116,1106,1085,1092,1089,1085,1112,1125,1106,1131,1107,1080,1068,1082,1076,1082,1099,1108,1103,1107,1110,1098,1105,1133,1144,1183,1199,1204,1213,1239,1251,1278,1315,1345,1415,1549,1590,1483,1446,1529,1645};
        }

        public SamplesECG(int[] muestras) {

                fs = 500;            //Frecuencia de muestreo
                Samples = new int[500*4];
                Samples = muestras;
        }

        public String getSamplesInString (int[] muestras){

            String str_samples = Arrays.toString(muestras);
            return str_samples;
        }

        public String[] getSamplesInMatrix(String muestras){

            String s[] = muestras.split(",");

            return s;
    }

    public int[] getSamplesInIntArray (String[] s){

        /*La primera y la ultima muestra tienen los caracteres [], hay que sacarlos*/
        int[] recup = new int[s.length];

        for(int curr = 0; curr<s.length; curr++)
        {
            /*Elimino el primer simbolo extranio que es [*/
            if(curr == 0) {
                recup[0] = Integer.parseInt(s[0].substring(1));
            }
            else if (curr == (s.length)-1){
                    /*Elimino el ultimo simbolo extranio ]*/
                recup[curr] = Integer.parseInt(s[curr].substring(1,s[curr].length()-1));
            }
            else {
                    /*Atencion, al hacer el plit tambien me guarda los espacios*/
                recup[curr] = Integer.parseInt(s[curr].substring(1, s[curr].length()));
            }
        }

        return recup;
    }
}