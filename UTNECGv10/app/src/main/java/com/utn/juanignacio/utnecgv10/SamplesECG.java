package com.utn.juanignacio.utnecgv10;

import java.io.Serializable;
import java.util.Arrays;

/**
 * Created by JuanIgnacio on 10/10/2015.
 */
public final class SamplesECG implements Serializable {

        public double fs;
        public int[] Samples;
        public double AVSS_mV = -3300;      //negative analogic reference to ground
        public double AVDD_mV = 3300;       //positive analogic reference to ground
        public double ADC_bits = 24;
        public double ADC_Amp = 6;

        public SamplesECG() {
                //instancia
                fs = 500;            //Frecuencia de muestreo
                //Muestras ejemplo creadas con ruido baja frecuencia (respiracion) y agregado de 50Hz
                Samples = new int[]{5857,7484,6605,5449,6949,9295,9926,8171,4950,2335,1126,513,-33,-87,590,588,135,-511,-433,-446,-358,-274,-139,-274,-328,-449,-854,-998,-893,-965,-720,-354,-435,-681,-607,-491,-653,-748,-985,-913,-630,-465,-535,-534,-320,-280,-452,-787,-756,-606,-526,-273,-185,-481,-295,-81,-307,-716,-729,-318,-245,-102,-180,-596,-366,-158,-493,-676,-505,-468,-273,-157,138,118,107,233,-61,-416,-333,-161,39,53,154,79,323,400,86,-243,-219,-157,169,351,488,452,732,1059,628,94,76,404,600,625,789,724,896,1213,1211,789,818,950,1245,1463,1651,1664,2053,2157,1743,1366,1551,1676,1872,2021,2457,2202,2254,2382,2361,2042,1850,2058,2099,2476,2774,2588,2470,2730,2496,2277,2180,2186,2335,2292,2385,2181,2004,2233,1931,1300,1041,882,869,1027,1274,1048,890,863,826,305,45,85,574,339,300,21,6,197,105,-382,-360,-327,-445,-206,113,86,165,277,54,-398,-538,-333,-10,111,-178,-239,145,369,-130,-309,-402,-323,-69,-84,253,188,167,396,144,-162,-247,-54,-13,136,390,465,379,373,324,-81,-67,-28,12,329,433,230,512,670,382,7,46,378,296,113,460,547,464,736,483,73,-101,-223,-41,407,552,502,346,667,548,16,-124,-31,204,361,650,583,526,772,607,123,267,274,149,493,848,909,781,891,750,384,166,154,112,334,560,706,728,874,775,454,175,205,333,606,681,636,667,869,635,462,298,558,452,558,850,870,672,814,818,603,393,586,390,674,910,1039,1050,1181,986,602,718,748,476,742,1032,919,945,1198,926,749,807,955,699,1085,1045,824,987,1318,1022,771,652,698,682,870,1093,1123,1027,1305,1093,921,715,769,829,892,1171,1197,1245,1472,1404,1214,720,648,851,1011,1222,1342,1323,1391,1127,1136,1003,827,1034,1125,1288,1328,1136,1438,1340,1110,897,1048,1236,1118,1295,1426,1504,1691,1569,1346,1172,1077,960,1342,1388,1518,1327,1473,1532,1325,1065,1185,1339,1476,1240,1469,1771,1816,1538,1207,939,1045,1105,1242,1429,1506,1617,1842,1827,1474,1388,1427,1065,1273,1465,1634,1681,1794,1615,1339,1218,1224,1324,1351,1483,1732,1720,1799,1733,1570,1152,1036,1248,1470,1872,2101,1771,1937,1946,1478,1446,1452,1484,1462,1647,1985,1795,1776,1926,1752,1539,1489,1493,1683,1822,1894,1785,2169,2062,1909,1505,1618,1956,2109,2390,2711,2868,3307,3405,3117,2880,3106,3143,3137,3246,3875,4057,4073,4104,4048,3638,3630,3533,3565,3473,3404,3419,3440,3510,3063,2432,1916,1663,1705,1885,2012,1986,2087,2118,2079,1674,1422,1710,1840,2006,2113,1760,1910,1992,1882,1774,1548,1524,1604,1701,1864,1850,1992,1996,1754,1354,1460,1544,1828,2215,2936,3348,3472,3347,3192,2909,2923,3498,4540,5525,6888,8761,10278,9611,8099,8547,10750,11815,10443,7864,5369,4171,3687,2741,2706,2918,3094,3131,3019,2973,3206,3202,3247,3434,3241,2780,2311,2447,2671,2677,2660,2743,2794,3052,2889,2650,2468,2355,2628,2658,3018,3139,3193,3355,2997,2446,2425,2608,2748,2993,3025,2983,3028,3289,3202,3000,2681,2609,2884,3285,3469,3297,3098,3481,3413,3092,2999,2924,3278,3523,3480,3372,3351,3590,3472,3252,3270,3221,3258,3409,3708,3865,3810,3784,3798,3494,3285,3316,3494,3807,4013,3928,4039,4375,4297,3968,3836,3693,3877,4148,4438,4354,4490,4624,4319,4194,4184,4292,4301,4510,5022,5046,4970,5107,5060,4906,4718,4589,4792,5086,5429,5434,5429,5681,5767,5537,5266,5324,5433,5493,5927,5879,5611,5781,5860,5739,5487,5390,5693,6049,6063,6094,5557,5536,5620,5260,4759,5021,4752,4494,4644,4585,4405,4385,4288,3812,3445,3399,3497,3476,3470,3626,3557,3402,3766,3178,2493,2674,2897,2836,2825,2881,2784,3048,3068,2597,2350,2400,2367,2697,2933,2882,2805,3040,2953,2629,2416,2386,2583,2604,2752,2894,2876,3208,3200,3019,2902,2581,2674,2691,2886,3077,3059,3186,3000,3017,2850,3157,2883,2692,2991,3250,3127,3271,3329,3140,2682,2852,2926,2957,2923,3100,3251,3567,3255,3196,2703,2590,2771,2894,3037,3168,3255,3511,3245,2923,2726,2639,2765,2750,2881,3014,3076,3211,3080,2852,2802,2686,2582,2782,2921,3113,2999,3316,3342,3088,2706,2863,2587,2763,3043,3258,3353,3384,3206,3108,2838,2656,3012,3203,3154,3092,3269,3518,3284,3083,2918,2714,2882,3015,3076,3091,3257,3661,3640,3234,2782,2694,2996,2903,3287,3370,3321,3472,3413,3280,3212,3357,3174,3149,3271,3306,3335,3578,3607,3435,2961,2987,3109,3264,3468,3524,3595,3731,3728,3474,3069,3290,3581,3354,3409,3686,3525,3930,4108,3779,3278,3026,3399,3406,3459,3632,3678,3746,4041,3825,3468,3359,3363,3391,3663,3876,3862,4071,4031,3626,3299,3432,3594,3412,3504,3689,3476,3866,3876,3752,3413,3181,3267,3462,3609,3804,3554,3558,3863,3735,3238,3144,3297,3551,3512,3620,3448,3578,4028,3834,3340,3460,3399,3483,3546,3547,3734,3739,3991,4081,3576,3102,3286,3447,3476,3532,3550,3763,4052,3712,3415,3358,3321,3501,3642,3710,3731,3672,3840,3793,3276,3087,3215,3466,3558,3808,3599,3692,3860,3705,3443,3237,3496,3473,3704,3851,3881,3993,4241,4382,4241,4199,4517,4784,4842,5053,5294,5435,5478,5380,5021,5249,5346,5446,5702,5981,5962,5994,5907,5596,5001,4787,4909,5035,4807,4519,4265,4009,3770,3818,3605,3433,3449,3337,3455,3822,3797,3702,3765,3773,3399,3148,3284,3378,3412,3711,3548,3502,3883,3566,3264,3043,3052,3253,3347,3504,3528,3662,4044,4004,4145,4386,4534,4568,4571,5080,5301,5520,6107,7471,7859,8641,10421,10318,8763,9029,11093,12635,11987,9509,6392,4816,4450,3637,3750,4554,4916,4742,4752,4456,4334,4362,4506,4587,4448,4467,4432,4510,4687,4470,4012,3916,3986,4025,4066,4329,4665,4558,4443,4530,4266,3880,4058,4097,4006,4188,4416,4357,4668,4543,4303,4054,4085,4387,4437,4541,4560,4601,4836,4670,4683,4529,4252,4250,4274,4570,4893,4767,4761,4927,4623,4521,4671,4700,4603,4948,5322,5201,5309,5047,4767,4607,4634,4794,4939,5062,5213,5119,5295,5366,4938,4765,5084,4907,5152,5309,5564,5509,5569,5618,5372,5179,5482,5456,5452,5707,5900,5951,6386,6325,5848,5554,5800,5993,6090,6205,6318,6494,6743,6905,6480,6201,6360,6545,6515,6697,7023,7087,7154,7122,6996,6668,6673,6888,6983,6949,6914,7010,7326,7290,6791,6419,6203,6271,6431,6178,6327,6263,6127,5968,5417,5052,5262,5110,5045,4915,5022,4912,5052,4869,4471,4117,4021,3936,4057,4004,4102,4158,4212,4190,4007,3690,3589,3638,3486,3742,3859,3964,4089,4228,3867,3621,3525,3684,3745,3871,4160,4015,4029,4416,4053,3445,3467,3732,4018,4128,4086,3829,3952,4034,4107,3839,3785,3715,3730,3739,4150,4137,4290,4411,4064,3709,3719,3692,3883,3926,4188,4317,4067,4378,4204,3681,3535,3737,3782,3986,4147,4139,4415,4437,4095,3768,3593,3690,3965,3883,4110,4288,4355,4384,4170,3568,3842,3676,3834,3982,4001,4034,4191,4274,4064,3714,3663,3653,4003,4063,4214,4148,4296,4262,4166,3777,3676,3739,3552,3757,4021,3844,3957,4457,4281,3677,3518,3592,3903,3961,3779,3960,4077,4285,4348,3796,3665,3654,3787,3930,4083,4138,4235,4144,4197,3741,3595,3611,3618,3937,4134,4202,4314,4343,4246,3888,3832,3772,3770,3905,4221,4331,4256,4406,4439,3913,3820,3840,4115,4363,4395,4305,4294,4352,4180,3954,3822,3733,3970,4182,4343,4343,4224,4324,4500,4230,4002,3963,3927,4173,4388,4276,4408,4491,4513,4118,3895,4078,4074,4282,4498,4342,4411,4640,4603,4357,4176,4131,4037,4257,4543,4552,4488,4784,4871,4539,4165,4106,4122,4582,4842,4855,4895,4699,4740,4423,4256,4335,4197,4283,4706,4687,4677,4958,5031,4666,4351,4280,4429,4724,4808,4640,4684,5055,4986,4720,4382,4449,4521,4533,4927,5048,4975,5254,5301,5256,5224,5242,5374,5594,6169,6476,6257,6674,6792,6443,6241,6552,6603,6802,7157,7415,7503,7539,7324,6895,6530,6442,6279,6530,6611,6359,5815,5770,5580,5117,4812,4874,4706,4798,5075,5299,5263,5320,5226,5069,4735,4834,4795,4733,5131,5333,5041,5406,5042,4631,4434,4652,4555,4639,4895,5024,4958,5001,5049,4868,4961,5395,5561,6139,6392,6463,6595,6982,7163,7565,8133,8589,9646,11696,12306,10677,10108,11366,13127,11215,12842,11962,10805,12304,14651,15281,13525,10303,7688,6479,5865,5318,5263,5940,5937,5484,4837,4915,4901,4988,5071,5207,5071,5016,4894,4488,4344,4449,4376,4620,4986,4904,4657,4731,4847,4684,4588,4350,4421,4704,4869,4798,4798,5012,5051,4878,4543,4574,4723,4802,5054,5141,4845,5031,5244,5017,4608,4594,5004,5076,5219,5141,4724,4953,5160,4825,4641,4811,4848,5043,5158,5452,5431,5420,5545,5250,4895,4977,5149,5348,5361,5461,5386,5629,5706,5391,5062,5085,5146,5471,5653,5789,5752,6032,6358,5927,5392,5373,5700,5896,5920,6083,6017,6190,6506,6503,6080,6108,6240,6534,6751,6938,6951,7340,7443,7028,6651,6835,6959,7154,7302,7738,7482,7533,7661,7640,7320,7127,7334,7375,7751,8048,7861,7743,8002,7767,7548,7450,7456,7604,7560,7652,7448,7270,7498,7195,6564,6304,6144,6130,6288,6535,6308,6149,6121,6084,5562,5301,5340,5829,5593,5553,5273,5258,5448,5355,4867,4889,4921,4803,5041,5360,5332,5410,5521,5297,4845,4704,4908,5230,5351,5061,4999,5382,5606,5106,4926,4832,4911,5164,5148,5484,5419,5397,5625,5372,5066,4981,5173,5213,5361,5615,5689,5602,5595,5546,5140,5153,5191,5231,5547,5650,5446,5728,5885,5596,5220,5259,5590,5507,5323,5670,5756,5672,5943,5690,5279,5104,4981,5163,5610,5754,5703,5546,5867,5747,5214,5073,5166,5400,5556,5844,5777,5719,5964,5798,5314,5457,5463,5337,5681,6035,6095,5965,6075,5933,5566,5347,5335,5292,5513,5738,5884,5905,6050,5950,5629,5349,5378,5505,5778,5852,5806,5836,6038,5803,5629,5464,5724,5617,5721,6012,6032,5833,5974,5977,5762,5551,5743,5546,5830,6065,6193,6203,6334,6138,5753,5868,5897,5624,5889,6178,6065,6090,6342,6069,5892,5949,6096,5839,6225,6184,5961,6124,6454,6157,5905,5786,5831,5814,6001,6224,6253,6156,6433,6220,6047,5840,5893,5953,6015,6293,6318,6366,6592,6522,6331,5837,5764,5966,6125,6336,6455,6435,6503,6237,6245,6111,5935,6141,6231,6393,6433,6240,6540,6441,6211,5997,6147,6334,6216,6392,6522,6599,6785,6662,6438,6264,6168,6050,6431,6476,6605,6413,6558,6617,6409,6148,6267,6420,6556,6319,6548,6849,6893,6613,6282,6013,6118,6178,6314,6500,6575,6686,6910,6894,6540,6454,6492,6128,6336,6527,6695,6741,6854,6673,6396,6274,6280,6379,6405,6536,6784,6771,6849,6783,6619,6199,6082,6294,6515,6916,7145,6813,6978,6986,6518,6485,6489,6521,6498,6682,7019,6828,6808,6957,6782,6569,6518,6520,6710,6848,6919,6809,7192,7084,6930,6526,6638,6974,7126,7407,7727,7883,8321,8418,8129,7891,8116,8152,8145,8254,8882,9062,9077,9108,9051,8640,8631,8533,8564,8471,8401,8415,8435,8505,8057,7424,6908,6654,6695,6873,7000,6973,7073,7103,7063,6657,6404,6691,6820,6985,7092,6737,6886,6968,6857,6747,6520};
        }

        public SamplesECG(int[] muestras) {

                fs = 500;            //Frecuencia de muestreo
                Samples = new int[500*4];
                Samples = muestras;
        }

        public String getSamplesInString (int[] muestras){

            String str_samples = Arrays.toString(muestras);
            return str_samples;
        }

        public String[] getSamplesInMatrix(String muestras){

            String s[] = muestras.split(",");

            return s;
    }

    public int[] getSamplesInIntArray (String[] s){

        /*La primera y la ultima muestra tienen los caracteres [], hay que sacarlos*/
        int[] recup = new int[s.length];

        for(int curr = 0; curr<s.length; curr++)
        {
            /*Elimino el primer simbolo extranio que es [*/
            if(curr == 0) {
                recup[0] = Integer.parseInt(s[0].substring(1));
            }
            else if (curr == (s.length)-1){
                    /*Elimino el ultimo simbolo extranio ]*/
                recup[curr] = Integer.parseInt(s[curr].substring(1,s[curr].length()-1));
            }
            else {
                    /*Atencion, al hacer el plit tambien me guarda los espacios*/
                recup[curr] = Integer.parseInt(s[curr].substring(1, s[curr].length()));
            }
        }

        return recup;
    }

    public double[] getSamplesInmV(int[] samp_int) {

        double[] sam_mV = new double[samp_int.length];
        int i = 0;
        double rangeADCmV = AVDD_mV - AVSS_mV;  //rango dinamico de tension del adc
        double steps = java.lang.Math.pow(2, ADC_bits);

        for(i=0;i<samp_int.length;i++){
            sam_mV[i] = (double) ((samp_int[i]*rangeADCmV)/(steps))/(ADC_Amp);
        }
        return sam_mV;
    }
}